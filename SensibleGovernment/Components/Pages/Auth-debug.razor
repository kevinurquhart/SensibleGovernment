@page "/auth-debug"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using SensibleGovernment.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedLocalStorage LocalStorage
@inject NavigationManager Navigation
@inject ILoggerFactory LoggerFactory
@rendermode InteractiveServer

<PageTitle>Authentication Debug</PageTitle>

<div class="container py-4">
    <h2>Authentication Debug Information</h2>
    
    <div class="card mb-3">
        <div class="card-header bg-info text-white">
            <h5>Current Authentication State</h5>
        </div>
        <div class="card-body">
            @if (authState != null)
            {
                <p><strong>Is Authenticated:</strong> @authState.User.Identity?.IsAuthenticated</p>
                <p><strong>Authentication Type:</strong> @authState.User.Identity?.AuthenticationType</p>
                <p><strong>User Name:</strong> @authState.User.Identity?.Name</p>
                
                <h6 class="mt-3">Claims:</h6>
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var claim in authState.User.Claims)
                        {
                            <tr>
                                <td>@claim.Type</td>
                                <td>@claim.Value</td>
                            </tr>
                        }
                    </tbody>
                </table>
                
                <h6 class="mt-3">Role Checks:</h6>
                <p>Is in role "Admin": @authState.User.IsInRole("Admin")</p>
                <p>Is in role "User": @authState.User.IsInRole("User")</p>
            }
            else
            {
                <p>Loading authentication state...</p>
            }
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header bg-warning">
            <h5>Local Storage Session</h5>
        </div>
        <div class="card-body">
            @if (sessionInfo != null)
            {
                <p><strong>User ID:</strong> @sessionInfo.UserId</p>
                <p><strong>User Name:</strong> @sessionInfo.UserName</p>
                <p><strong>Email:</strong> @sessionInfo.Email</p>
                <p><strong>Is Admin:</strong> @sessionInfo.IsAdmin</p>
                <p><strong>Expires At:</strong> @sessionInfo.ExpiresAt.ToString("yyyy-MM-dd HH:mm:ss")</p>
                <p><strong>Time Until Expiry:</strong> @((sessionInfo.ExpiresAt - DateTime.UtcNow).TotalMinutes.ToString("F1")) minutes</p>
            }
            else if (sessionChecked)
            {
                <p class="text-danger">No session found in local storage</p>
            }
            else
            {
                <p>Checking local storage...</p>
            }
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header bg-success text-white">
            <h5>Actions</h5>
        </div>
        <div class="card-body">
            <button class="btn btn-primary me-2" @onclick="RefreshState">Refresh State</button>
            <button class="btn btn-warning me-2" @onclick="ClearCache">Clear Cache</button>
            <button class="btn btn-info me-2" @onclick="TestAdminPage">Test Navigate to Admin</button>
            <button class="btn btn-secondary" @onclick="CheckLocalStorage">Check Local Storage</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @(messageIsError ? "alert-danger" : "alert-info") mt-3">
            @message
        </div>
    }
</div>

@code {
    private AuthenticationState? authState;
    private CustomAuthenticationStateProvider.UserSession? sessionInfo;
    private bool sessionChecked = false;
    private string message = "";
    private bool messageIsError = false;
    private ILogger? logger;

    protected override async Task OnInitializedAsync()
    {
        logger = LoggerFactory.CreateLogger("AuthDebug");
        await RefreshState();
        await CheckLocalStorage();
    }

    private async Task RefreshState()
    {
        try
        {
            authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            StateHasChanged();
            message = "Authentication state refreshed";
            messageIsError = false;
        }
        catch (Exception ex)
        {
            message = $"Error refreshing state: {ex.Message}";
            messageIsError = true;
            logger?.LogError(ex, "Error refreshing authentication state");
        }
    }

    private async Task CheckLocalStorage()
    {
        try
        {
            var result = await LocalStorage.GetAsync<CustomAuthenticationStateProvider.UserSession>("userSession");
            if (result.Success && result.Value != null)
            {
                sessionInfo = result.Value;
                message = "Session found in local storage";
                messageIsError = false;
            }
            else
            {
                sessionInfo = null;
                message = "No session in local storage";
                messageIsError = true;
            }
            sessionChecked = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = $"Error checking local storage: {ex.Message}";
            messageIsError = true;
            logger?.LogError(ex, "Error checking local storage");
        }
    }

    private async Task ClearCache()
    {
        var provider = AuthenticationStateProvider as CustomAuthenticationStateProvider;
        if (provider != null)
        {
            // Force a new authentication check by getting state again
            await provider.GetAuthenticationStateAsync();
            message = "Cache cleared and state refreshed";
            messageIsError = false;
        }
    }

    private void TestAdminPage()
    {
        Navigation.NavigateTo("/admin/dashboard");
    }
}