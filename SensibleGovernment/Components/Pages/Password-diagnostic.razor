@page "/password-diagnostic"
@using SensibleGovernment.Data
@using Microsoft.EntityFrameworkCore
@inject IServiceProvider ServiceProvider
@rendermode InteractiveServer

<PageTitle>Password Diagnostic Tool</PageTitle>

<div class="container py-5">
    <h2>Password Diagnostic Tool</h2>

    <div class="alert alert-warning">
        <strong>Development Only!</strong> Remove this page before deployment.
    </div>

    <div class="card mb-4">
        <div class="card-header bg-info text-white">
            <h5>Test Your Current Hash</h5>
        </div>
        <div class="card-body">
            <p>Your current hash in DB: <code>$2a$11$wbJrOa2J4r7pF3yvQfJZr.WS2pyOWHGNadIkyBj868KWUHlJwRq9i</code></p>

            <div class="mb-3">
                <label>Test a password against this hash:</label>
                <input type="text" class="form-control" @bind="testPassword" placeholder="Enter password to test" />
                <button class="btn btn-primary mt-2" @onclick="TestCurrentHash">Test Password</button>
            </div>

            @if (!string.IsNullOrEmpty(testResult))
            {
                <div class="alert @(testSuccess ? "alert-success" : "alert-danger")">
                    @testResult
                </div>
            }
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5>Generate New Password Hash</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label>Password to hash:</label>
                <input type="text" class="form-control" @bind="passwordToHash" />
                <button class="btn btn-success mt-2" @onclick="GenerateNewHash">Generate Hash</button>
            </div>

            @if (!string.IsNullOrEmpty(newHash))
            {
                <div class="alert alert-info">
                    <strong>New Hash Generated:</strong><br />
                    <code style="word-break: break-all;">@newHash</code><br />
                    <small>Verification: @verificationResult</small>
                </div>
            }
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header bg-success text-white">
            <h5>Fix User Password</h5>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label>Email:</label>
                <select class="form-control" @bind="selectedEmail">
                    <option value="kevin@kausolutions.co.uk">kevin@kausolutions.co.uk</option>
                    <option value="john@example.com">john@example.com</option>
                </select>
            </div>
            <div class="mb-3">
                <label>New Password:</label>
                <input type="text" class="form-control" @bind="newPassword" />
            </div>
            <button class="btn btn-success" @onclick="FixUserPassword">Fix Password</button>

            @if (!string.IsNullOrEmpty(fixMessage))
            {
                <div class="alert @(fixSuccess ? "alert-success" : "alert-danger") mt-3">
                    @fixMessage
                </div>
            }
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-dark text-white">
            <h5>Database Users</h5>
        </div>
        <div class="card-body">
            <button class="btn btn-info mb-3" @onclick="LoadUsers">Refresh Users</button>

            @if (users.Any())
            {
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Email</th>
                                <th>Hash (first 30 chars)</th>
                                <th>Valid BCrypt?</th>
                                <th>Test with Password123!</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in users)
                            {
                                <tr>
                                    <td>@user.Email</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(user.PasswordHash))
                                        {
                                            <code>@user.PasswordHash.Substring(0, Math.Min(30, user.PasswordHash.Length))...</code>
                                        }
                                        else
                                        {
                                            <span class="text-danger">NO HASH</span>
                                        }
                                    </td>
                                    <td>
                                        @if (IsValidBCryptHash(user.PasswordHash))
                                        {
                                            <span class="badge bg-success">Valid</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Invalid</span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(user.PasswordHash))
                                        {
                                            var matches = BCrypt.Net.BCrypt.Verify("Password123!", user.PasswordHash);
                                            if (matches)
                                            {
                                                <span class="badge bg-success">MATCHES</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-warning">No Match</span>
                                            }
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-primary" @onclick="() => QuickFix(user.Email)">
                                            Quick Fix
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<SensibleGovernment.Models.User> users = new();

    // Test current hash
    private string testPassword = "Password123!";
    private string testResult = "";
    private bool testSuccess = false;

    // Generate new hash
    private string passwordToHash = "Password123!";
    private string newHash = "";
    private string verificationResult = "";

    // Fix user password
    private string selectedEmail = "kevin@kausolutions.co.uk";
    private string newPassword = "Password123!";
    private string fixMessage = "";
    private bool fixSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        using var scope = ServiceProvider.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        users = await context.Users.ToListAsync();
    }

    private void TestCurrentHash()
    {
        try
        {
            string hashToTest = "$2a$11$wbJrOa2J4r7pF3yvQfJZr.WS2pyOWHGNadIkyBj868KWUHlJwRq9i";
            bool matches = BCrypt.Net.BCrypt.Verify(testPassword, hashToTest);

            if (matches)
            {
                testResult = $"✓ Password '{testPassword}' MATCHES the hash!";
                testSuccess = true;
            }
            else
            {
                testResult = $"✗ Password '{testPassword}' does NOT match the hash.";
                testSuccess = false;
            }
        }
        catch (Exception ex)
        {
            testResult = $"Error testing: {ex.Message}";
            testSuccess = false;
        }
    }

    private void GenerateNewHash()
    {
        try
        {
            // Generate with explicit work factor
            newHash = BCrypt.Net.BCrypt.HashPassword(passwordToHash, BCrypt.Net.BCrypt.GenerateSalt(11));

            // Immediately verify it works
            bool verifies = BCrypt.Net.BCrypt.Verify(passwordToHash, newHash);
            verificationResult = verifies ? "✓ Verification successful!" : "✗ Verification failed!";
        }
        catch (Exception ex)
        {
            newHash = $"Error: {ex.Message}";
            verificationResult = "Failed";
        }
    }

    private async Task FixUserPassword()
    {
        try
        {
            using var scope = ServiceProvider.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();

            var user = await context.Users.FirstOrDefaultAsync(u => u.Email == selectedEmail);

            if (user == null)
            {
                fixMessage = $"User {selectedEmail} not found!";
                fixSuccess = false;
                return;
            }

            // Generate a fresh hash
            string freshHash = BCrypt.Net.BCrypt.HashPassword(newPassword, BCrypt.Net.BCrypt.GenerateSalt(11));

            // Update user
            user.PasswordHash = freshHash;
            user.FailedLoginAttempts = 0;
            user.LockoutEnd = null;
            user.LastFailedLogin = null;

            await context.SaveChangesAsync();

            // Verify it saved correctly
            var verifyUser = await context.Users.FirstOrDefaultAsync(u => u.Email == selectedEmail);
            bool verifies = BCrypt.Net.BCrypt.Verify(newPassword, verifyUser.PasswordHash);

            fixMessage = $"Password updated for {selectedEmail}.\n" +
                        $"Hash: {freshHash.Substring(0, 30)}...\n" +
                        $"Verification: {(verifies ? "✓ PASSED" : "✗ FAILED")}";
            fixSuccess = verifies;

            await LoadUsers();
        }
        catch (Exception ex)
        {
            fixMessage = $"Error: {ex.Message}";
            fixSuccess = false;
        }
    }

    private async Task QuickFix(string email)
    {
        selectedEmail = email;
        newPassword = "Password123!";
        await FixUserPassword();
    }

    private bool IsValidBCryptHash(string hash)
    {
        if (string.IsNullOrEmpty(hash)) return false;

        // BCrypt hashes start with $2a$, $2b$, or $2y$ and are 60 characters long
        return (hash.StartsWith("$2a$") || hash.StartsWith("$2b$") || hash.StartsWith("$2y$"))
               && hash.Length == 60;
    }
}