@page "/"
@using SensibleGovernment.Models
@using SensibleGovernment.Services
@using SensibleGovernment.Components.Layout
@inject PostService PostService
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>The Sensible Citizen - Accountability, Analysis, Action</PageTitle>

<div class="main-container">
    @if (loading)
    {
        <div class="loading-skeleton">
            <div class="skeleton-box" style="height: 400px;"></div>
            <div class="row mt-3">
                @for (int i = 0; i < 6; i++)
                {
                    <div class="col-md-4 mb-3">
                        <div class="skeleton-box" style="height: 200px;"></div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <!-- Breaking News Alert (if applicable) -->
        @if (breakingNews != null)
        {
            <div class="breaking-news">
                <span class="breaking-label">BREAKING</span>
                <span class="breaking-text">@breakingNews.Title</span>
                <a href="/post/@breakingNews.Id" class="breaking-link">Read more →</a>
            </div>
        }

        <!-- Main Content Area -->
        <div class="content-wrapper">
            <div class="row">
                <!-- Main Column -->
                <div class="col-lg-9">
                    <!-- Hero Story -->
                    @if (heroPost != null)
                    {
                        <section class="hero-section mb-4">
                            <ArticleCard Post="heroPost" Size="ArticleCard.CardSize.Hero" />
                        </section>
                    }

                    <!-- Top Stories Grid -->
                    @if (topStories.Any())
                    {
                        <section class="top-stories mb-4">
                            <h2 class="section-title">Top Stories</h2>
                            <div class="row">
                                @foreach (var post in topStories.Take(3))
                                {
                                    <div class="col-md-4 mb-3">
                                        <ArticleCard Post="post" Size="ArticleCard.CardSize.Large" />
                                    </div>
                                }
                            </div>
                        </section>
                    }

                    <!-- Opinion & Analysis -->
                    @if (opinionPosts.Any())
                    {
                        <section class="opinion-section mb-4">
                            <h2 class="section-title opinion-title">Opinion & Analysis</h2>
                            <div class="row">
                                @foreach (var post in opinionPosts.Take(2))
                                {
                                    <div class="col-md-6 mb-3">
                                        <ArticleCard Post="post" Size="ArticleCard.CardSize.Medium" ShowStats="false" />
                                    </div>
                                }
                            </div>
                        </section>
                    }

                    <!-- More News Grid -->
                    <section class="more-news">
                        <h2 class="section-title">More News</h2>
                        <div class="row">
                            @foreach (var post in moreNews.Take(8))
                            {
                                <div class="col-md-3 col-sm-6 mb-3">
                                    <ArticleCard Post="post" Size="ArticleCard.CardSize.Small" />
                                </div>
                            }
                        </div>
                    </section>
                </div>

                <!-- Sidebar -->
                <div class="col-lg-3">
                    <!-- Most Read -->
                    <aside class="sidebar-section">
                        <h3 class="sidebar-title">Most Read</h3>
                        <ol class="most-read-list">
                            @foreach (var post in mostReadPosts.Take(5))
                            {
                                <li>
                                    <ArticleCard Post="post" Size="ArticleCard.CardSize.Minimal" ShowTopic="false" ShowAuthor="false" ShowStats="false" />
                                </li>
                            }
                        </ol>
                    </aside>

                    <!-- Government Watch -->
                    <aside class="sidebar-section government-watch">
                        <h3 class="sidebar-title">Government Watch</h3>
                        <div class="watch-content">
                            <div class="watch-item">
                                <span class="watch-label">Days in Power</span>
                                <span class="watch-value">@GetDaysInPower()</span>
                            </div>
                            <div class="watch-item">
                                <span class="watch-label">Promises Kept</span>
                                <span class="watch-value text-success">12</span>
                            </div>
                            <div class="watch-item">
                                <span class="watch-label">Promises Broken</span>
                                <span class="watch-value text-danger">8</span>
                            </div>
                            <div class="watch-item">
                                <span class="watch-label">Next Election</span>
                                <span class="watch-value">@GetDaysToElection() days</span>
                            </div>
                        </div>
                    </aside>

                    <!-- Newsletter Signup -->
                    @if (!AuthService.IsAuthenticated)
                    {
                        <aside class="sidebar-section newsletter">
                            <h3 class="sidebar-title">Daily Briefing</h3>
                            <p class="newsletter-text">Get the day's key stories and analysis delivered to your inbox</p>
                            <a href="/register" class="btn btn-newsletter">Sign Up Free</a>
                        </aside>
                    }

                    <!-- Topics -->
                    <aside class="sidebar-section">
                        <h3 class="sidebar-title">Topics</h3>
                        <div class="topic-cloud">
                            @foreach (var topic in GetTopicCounts())
                            {
                                <a href="/?topic=@topic.Topic" class="topic-tag">
                                    @topic.Topic <span class="topic-count">(@topic.Count)</span>
                                </a>
                            }
                        </div>
                    </aside>
                </div>
            </div>
        </div>
    }
</div>

<style>
    /* Professional British news site styling */
    .main-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
        background: #f8f8f8;
    }

    .loading-skeleton {
        animation: pulse 1.5s infinite;
    }

    .skeleton-box {
        background: #e0e0e0;
        border-radius: 4px;
    }

    @@keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    /* Breaking news banner */
    .breaking-news {
        background: #c8102e;
        color: white;
        padding: 12px 20px;
        margin-bottom: 20px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .breaking-label {
        background: white;
        color: #c8102e;
        padding: 4px 8px;
        font-weight: 700;
        font-size: 0.75rem;
        letter-spacing: 1px;
    }

    .breaking-text {
        flex: 1;
        font-weight: 500;
    }

    .breaking-link {
        color: white;
        text-decoration: none;
        font-weight: 500;
        white-space: nowrap;
    }

    .breaking-link:hover {
        text-decoration: underline;
    }

    /* Content wrapper */
    .content-wrapper {
        background: white;
        border: 1px solid #e0e0e0;
        padding: 20px;
    }

    /* Section titles */
    .section-title {
        font-family: 'Georgia', serif;
        font-size: 1.5rem;
        font-weight: 700;
        color: #0f1419;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #c8102e;
    }

    .opinion-title {
        border-bottom-color: #ffd600;
    }

    /* Sidebar styling */
    .sidebar-section {
        background: white;
        border: 1px solid #e0e0e0;
        padding: 20px;
        margin-bottom: 20px;
    }

    .sidebar-title {
        font-family: 'Georgia', serif;
        font-size: 1.125rem;
        font-weight: 700;
        color: #0f1419;
        margin-bottom: 15px;
        padding-bottom: 8px;
        border-bottom: 2px solid #012169;
    }

    /* Most read list */
    .most-read-list {
        counter-reset: item;
        padding-left: 0;
    }

    .most-read-list li {
        counter-increment: item;
        display: flex;
        align-items: flex-start;
        margin-bottom: 12px;
        padding-bottom: 12px;
        border-bottom: 1px solid #e0e0e0;
    }

    .most-read-list li:last-child {
        border-bottom: none;
        margin-bottom: 0;
        padding-bottom: 0;
    }

    .most-read-list li::before {
        content: counter(item);
        font-size: 1.5rem;
        font-weight: 700;
        color: #c8102e;
        margin-right: 12px;
        min-width: 30px;
    }

    /* Government Watch */
    .government-watch {
        background: linear-gradient(135deg, #012169 0%, #0f1419 100%);
        color: white;
    }

    .government-watch .sidebar-title {
        color: white;
        border-bottom-color: #c8102e;
    }

    .watch-content {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .watch-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid rgba(255,255,255,0.1);
    }

    .watch-label {
        font-size: 0.875rem;
        opacity: 0.9;
    }

    .watch-value {
        font-weight: 700;
        font-size: 1.125rem;
    }

    /* Newsletter */
    .newsletter {
        background: #ffd600;
        border: none;
    }

    .newsletter .sidebar-title {
        border-bottom-color: #0f1419;
    }

    .newsletter-text {
        font-size: 0.9rem;
        margin-bottom: 15px;
        color: #0f1419;
    }

    .btn-newsletter {
        width: 100%;
        background: #0f1419;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 4px;
        font-weight: 600;
        transition: background 0.2s;
    }

    .btn-newsletter:hover {
        background: #c8102e;
        color: white;
    }

    /* Topic cloud */
    .topic-cloud {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }

    .topic-tag {
        display: inline-block;
        padding: 6px 12px;
        background: #f5f5f5;
        border: 1px solid #e0e0e0;
        border-radius: 20px;
        color: #536471;
        text-decoration: none;
        font-size: 0.875rem;
        transition: all 0.2s;
    }

    .topic-tag:hover {
        background: #012169;
        color: white;
        border-color: #012169;
    }

    .topic-count {
        opacity: 0.7;
        font-size: 0.8rem;
    }

    /* Responsive */
    @@media (max-width: 992px) {
        .content-wrapper {
            padding: 15px;
        }

        .col-lg-9, .col-lg-3 {
            padding: 0 15px;
        }
    }

    @@media (max-width: 768px) {
        .main-container {
            padding: 10px;
        }

        .section-title {
            font-size: 1.25rem;
        }
    }
</style>

@code {
    private bool loading = true;
    private Post? breakingNews;
    private Post? heroPost;
    private List<Post> topStories = new();
    private List<Post> opinionPosts = new();
    private List<Post> moreNews = new();
    private List<Post> mostReadPosts = new();
    private List<Post> allPosts = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
        AuthService.OnAuthStateChanged += async () => 
        {
            await LoadPosts();
            await InvokeAsync(StateHasChanged);
        };
    }

    private async Task LoadPosts()
    {
        loading = true;
        
        // Get query parameters
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var topic = query["topic"];
        var search = query["search"];

        allPosts = await PostService.GetAllPostsAsync();

        // Apply filters
        var filteredPosts = allPosts.AsEnumerable();
        
        if (!string.IsNullOrEmpty(topic))
        {
            filteredPosts = filteredPosts.Where(p => p.Topic == topic);
        }
        
        if (!string.IsNullOrEmpty(search))
        {
            var searchLower = search.ToLower();
            filteredPosts = filteredPosts.Where(p => 
                p.Title.ToLower().Contains(searchLower) ||
                p.Content.ToLower().Contains(searchLower));
        }

        var posts = filteredPosts.ToList();

        // Set breaking news (posts less than 2 hours old with high importance)
        breakingNews = posts
            .Where(p => (DateTime.Now - p.Created).TotalHours < 2 && p.IsFeatured)
            .FirstOrDefault();

        // Set hero post (most important recent story)
        heroPost = posts
            .Where(p => p != breakingNews)
            .OrderByDescending(p => p.IsFeatured)
            .ThenByDescending(p => p.Created)
            .FirstOrDefault();

        // Top stories (next 3 most recent, excluding hero and breaking)
        topStories = posts
            .Where(p => p != heroPost && p != breakingNews)
            .OrderByDescending(p => p.Created)
            .Take(3)
            .ToList();

        // Opinion posts (posts with substantial opinion content)
        opinionPosts = posts
            .Where(p => !string.IsNullOrEmpty(p.Opinion) && p != heroPost && p != breakingNews)
            .OrderByDescending(p => p.Created)
            .Take(4)
            .ToList();

        // More news (everything else)
        var usedPosts = new[] { heroPost, breakingNews }
            .Concat(topStories)
            .Concat(opinionPosts)
            .Where(p => p != null);

        moreNews = posts
            .Where(p => !usedPosts.Contains(p))
            .OrderByDescending(p => p.Created)
            .ToList();

        // Most read (by view count)
        mostReadPosts = allPosts
            .OrderByDescending(p => p.ViewCount)
            .Take(5)
            .ToList();

        loading = false;
    }

    private int GetDaysInPower()
    {
        // Days since last election (example: July 4, 2024)
        var electionDate = new DateTime(2024, 7, 4);
        return (DateTime.Now - electionDate).Days;
    }

    private int GetDaysToElection()
    {
        // Next election (max 5 years from last)
        var nextElection = new DateTime(2029, 7, 4);
        return Math.Max(0, (nextElection - DateTime.Now).Days);
    }

    private List<(string Topic, int Count)> GetTopicCounts()
    {
        var topics = new[] { "Politics", "Economy", "Health", "Education", "Technology", "Sport" };
        return topics
            .Select(t => (Topic: t, Count: allPosts.Count(p => p.Topic == t || (t == "Politics" && p.Topic == "News"))))
            .Where(x => x.Count > 0)
            .OrderByDescending(x => x.Count)
            .ToList();
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= async () => 
        {
            await LoadPosts();
            await InvokeAsync(StateHasChanged);
        };
    }
}