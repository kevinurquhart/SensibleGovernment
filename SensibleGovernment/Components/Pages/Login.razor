@page "/login"
@using SensibleGovernment.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@inject CustomAuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer
@attribute [AllowAnonymous]

<PageTitle>Login - The Sensible Citizen</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h2 class="card-title mb-4">
                        <i class="bi bi-shield-lock"></i> Secure Login
                    </h2>

                    @if (showTimeoutMessage)
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-clock"></i> Your session has expired. Please login again.
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle"></i> @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle"></i> @successMessage
                        </div>
                    }

                    @if (requiresCaptcha)
                    {
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> Multiple login attempts detected. Please complete the security check.
                        </div>
                    }

                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                                <InputText class="form-control" type="email" @bind-Value="loginModel.Email"
                                           placeholder="your@email.com" />
                            </div>
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-key"></i></span>
                                <InputText class="form-control" type="@(showPassword ? "text" : "password")"
                                           @bind-Value="loginModel.Password" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="TogglePassword">
                                    <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        @if (requiresCaptcha)
                        {
                            <div class="mb-3">
                                <label class="form-label">Security Check</label>
                                <div class="alert alert-light">
                                    <small>What is @captchaA + @captchaB?</small>
                                    <InputNumber class="form-control mt-2" @bind-Value="captchaAnswer" />
                                </div>
                            </div>
                        }

                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value="loginModel.RememberMe" id="rememberMe" />
                                <label class="form-check-label" for="rememberMe">
                                    Remember me for 30 days
                                </label>
                            </div>
                        </div>

                        <button class="btn btn-primary w-100" type="submit" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <i class="bi bi-box-arrow-in-right"></i> Secure Login
                        </button>

                        @if (showTwoFactorInput)
                        {
                            <div class="mt-3">
                                <label class="form-label">Two-Factor Authentication Code</label>
                                <InputText class="form-control" @bind-Value="twoFactorCode"
                                           placeholder="Enter 6-digit code" maxlength="6" />
                                <button class="btn btn-success w-100 mt-2" @onclick="VerifyTwoFactor">
                                    Verify Code
                                </button>
                            </div>
                        }
                    </EditForm>

                    <hr class="my-4" />

                    <div class="text-center">
                        <a href="/forgot-password" class="text-decoration-none">
                            <i class="bi bi-question-circle"></i> Forgot your password?
                        </a>
                    </div>

                    <div class="mt-3 text-center">
                        <span>Don't have an account?</span>
                        <a href="/register" class="text-decoration-none ms-1">
                            <strong>Register now</strong>
                        </a>
                    </div>

                    @if (showSecurityTips)
                    {
                        <div class="alert alert-secondary mt-4">
                            <h6><i class="bi bi-shield-check"></i> Security Tips</h6>
                            <ul class="small mb-0">
                                <li>Never share your password with anyone</li>
                                <li>Use a unique password for this site</li>
                                <li>Enable two-factor authentication if you're an admin</li>
                                <li>Always logout when using shared computers</li>
                            </ul>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;
    private bool showPassword = false;
    private bool requiresCaptcha = false;
    private bool showTwoFactorInput = false;
    private bool showTimeoutMessage = false;
    private bool showSecurityTips = true;
    private string twoFactorCode = "";

    // Simple CAPTCHA
    private int captchaA;
    private int captchaB;
    private int captchaAnswer;

    protected override void OnInitialized()
    {
        if (AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
        }

        // Check for timeout parameter
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        showTimeoutMessage = query["timeout"] == "true";

        GenerateCaptcha();
    }

    private void GenerateCaptcha()
    {
        var random = new Random();
        captchaA = random.Next(1, 10);
        captchaB = random.Next(1, 10);
    }

    private void TogglePassword()
    {
        showPassword = !showPassword;
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            // Validate CAPTCHA if required
            if (requiresCaptcha && captchaAnswer != (captchaA + captchaB))
            {
                errorMessage = "Incorrect security check answer. Please try again.";
                GenerateCaptcha();
                isLoading = false;
                return;
            }

            var success = await AuthProvider.LoginAsync(
                loginModel.Email,
                loginModel.Password);

            if (success)
            {
                successMessage = "Login successful! Redirecting...";
                await Task.Delay(500);
                Navigation.NavigateTo("/", true); // Force reload to update auth state
            }
            else
            {
                errorMessage = "Invalid email or password";
                if (requiresCaptcha)
                {
                    GenerateCaptcha();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task VerifyTwoFactor()
    {
        // In production, verify the TOTP code properly
        // For now, we'll accept any 6-digit code
        if (twoFactorCode.Length == 6)
        {
            successMessage = "Two-factor authentication successful!";
            await Task.Delay(500);
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid code. Please enter a 6-digit code.";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; } = false;
    }
}