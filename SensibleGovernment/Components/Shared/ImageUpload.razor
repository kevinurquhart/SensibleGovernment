@using Microsoft.AspNetCore.Components.Forms
@using SensibleGovernment.Services
@inject ImageUploadService ImageService

<div class="image-upload-component">
    <div class="mb-3">
        <label class="form-label">@Label</label>

        @if (!string.IsNullOrEmpty(CurrentImageUrl))
        {
            <div class="current-image mb-3">
                <img src="@CurrentImageUrl" class="img-thumbnail" style="max-height: 200px;" />
                <button type="button" class="btn btn-sm btn-danger ms-2" @onclick="RemoveImage">
                    <i class="bi bi-trash"></i> Remove
                </button>
            </div>
        }

        <InputFile OnChange="HandleFileSelected" accept="image/*" class="form-control" />

        @if (isUploading)
        {
            <div class="progress mt-2">
                <div class="progress-bar progress-bar-striped progress-bar-animated"
                     role="progressbar" style="width: 100%"></div>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-2">
                @errorMessage
            </div>
        }

        @if (preview != null)
        {
            <div class="mt-2">
                <img src="@preview" class="img-thumbnail" style="max-height: 200px;" />
            </div>
        }

        <small class="text-muted">@HelpText</small>
    </div>
</div>

@code {
    [Parameter] public string Label { get; set; } = "Upload Image";
    [Parameter] public string HelpText { get; set; } = "Supported formats: JPG, PNG, GIF, WebP (Max 10MB)";
    [Parameter] public string CurrentImageUrl { get; set; } = "";
    [Parameter] public EventCallback<string> OnImageUploaded { get; set; }
    [Parameter] public EventCallback OnImageRemoved { get; set; }

    private bool isUploading = false;
    private string? errorMessage;
    private string? preview;
    private IBrowserFile? selectedFile;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        preview = null;
        selectedFile = e.File;

        if (selectedFile == null)
            return;

        // Validate file size (10MB max)
        if (selectedFile.Size > 10 * 1024 * 1024)
        {
            errorMessage = "File size must be less than 10MB";
            return;
        }

        // Validate file type
        var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "image/webp" };
        if (!allowedTypes.Contains(selectedFile.ContentType))
        {
            errorMessage = "Only JPG, PNG, GIF, and WebP images are allowed";
            return;
        }

        try
        {
            isUploading = true;

            // Create preview
            var imageFile = await selectedFile.RequestImageFileAsync(selectedFile.ContentType, 1024, 768);
            using var stream = imageFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var buffer = new byte[stream.Length];
            await stream.ReadAsync(buffer);
            preview = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";

            // Upload file
            using var uploadStream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var (uploadSuccess, uploadFilePath, uploadError) = await ImageService.UploadImageAsync(
                uploadStream,
                selectedFile.Name,
                selectedFile.ContentType);

            if (uploadSuccess && uploadFilePath != null)
            {
                CurrentImageUrl = uploadFilePath;
                await OnImageUploaded.InvokeAsync(uploadFilePath);
                preview = null; // Clear preview after successful upload
            }
            else
            {
                errorMessage = uploadError ?? "Failed to upload image";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error uploading image: {ex.Message}";
        }
        finally
        {
            isUploading = false;
        }
    }

    private async Task RemoveImage()
    {
        CurrentImageUrl = "";
        preview = null;
        await OnImageRemoved.InvokeAsync();
    }
}